<?php
/**
 * https://leetcode-cn.com/problems/4sum-ii/
 * 454. 四数相加 II
 *
 * 笔记：原本想使用DFS算法解决此题，但其效率很低，如果数组很长，效率更低
 * 在看了大家的解题思路后，我把这题目想复杂了，其实思路很简单
 *
 * 思路：先计算A、B数组的组合后之和arr1，再计算C、D数组之和的负数，这个负数是否在arr1，在的话则增加计数
 * 也是使用到了map
 */

class Solution
{

    /**
     * @param Integer[] $A
     * @param Integer[] $B
     * @param Integer[] $C
     * @param Integer[] $D
     * @return Integer
     */

    function fourSumCount($A, $B, $C, $D) {
        $sumCount = 0;
        $ret1 = [];
        foreach($A as $va) {
            foreach ($B as $vb) {
                $sum = $va + $vb;
                $ret1[$sum] = isset($ret1[$sum]) ? $ret1[$sum] + 1 : 1;
            }
        }

        foreach($C as $vc) {
            foreach ($D as $vd) {
                $sum = $vc + $vd;
                if (isset($ret1[-$sum])) {
                    $sumCount += $ret1[-$sum];
                }
            }
        }
        return $sumCount;
    }
}


$solution = new Solution();
$A = [-1,-1];
$B = [-1,1];
$C = [-1,1];
$D = [1,-1];
//$A = [1, 2];
//$B = [-2, -1];
//$C = [-1, 2];
//$D = [0, 2];
//$A = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
//$B = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
//$C = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
//$D = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

$ret = $solution->fourSumCount($A, $B, $C, $D);
var_export($ret);